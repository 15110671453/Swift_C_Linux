使用自己的c 代码 制作 c module  为swift 提供使用 linux ubuntu

第一
	
	第一使用 swift package init --type library

	创建 动态库  注意 swift 只支持 动态库 静态库 不支持引用

	帮助我们生成 动态库 dynamic

	具体目录结构 Package 描述文件 见文件夹CSwift

	swift build  命令后 生成我们要用的动态库

第二 将 第一步 创建的动态库 进行 项目引用

	先创建Swift 应用程序工程目录
	swift package init --type executable

	会帮助我们创建应用程序工程基本目录

	在其中的源码目录 建立 include 目录

	在其下建立 要引用的c Module  名字文件夹 我们叫 CSwift

	swift package init --type system-module

	然后 将 module.modulemap 与 描述文件 以及要用到的c module 的 哪些头文件 也放在 module.modulemap 同级目录 放置到 该Cswift根目录

	对应模块源码放到 CSwift 下的Sources 目录 

第三 在我们生成第二步的应用程序时  要依赖第一不生成的动态库
	
	因此 第一步 确保我们可以看到生成 dylib 或者 linux的so 文件

	然后 第二步 确保 应用程序目录下的 源码目录下 建立include 然后引入 上面的动态库的头文件 模块引用描述文件 module.modulemap package.swift

	接下来 build 因为main.swift 中我们会import 我们自定义的包名

	然后使用包里的接口 

	因此 如果 build 提示 错误 import 失败  证明 我们的include 下的依赖包目录结构有问题

	如果 build 提示 需要将module.modulemap 放到include 目录下 也是依赖包的目录结构有问题 确保目录结构没问题 但依旧提示  那么修改 应用程序根目录下的Package.swift 下的targets 下 如果指明国Path 参数 取消掉该参数 重新build

	如果 build 提示 找不到 .dylib 库  我们需要在build 后 将我们第一步的 .dylib动态库 cp到 当前应用程序的.build/x86/debug 目录下  重新build



	